#!/bin/bash
################################################################################
# (c) Copyright 2007-2011 Alces Software Ltd                                   #
#                                                                              #
# HPC Cluster Toolkit                                                          #
#                                                                              #
# This file/package is part of the HPC Cluster Toolkit                         #
#                                                                              #
# This is free software: you can redistribute it and/or modify it under        #
# the terms of the GNU Affero General Public License as published by the Free  #
# Software Foundation, either version 3 of the License, or (at your option)    #
# any later version.                                                           #
#                                                                              #
# This file is distributed in the hope that it will be useful, but WITHOUT     #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        #
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License #
# for more details.                                                            #
#                                                                              #
# You should have received a copy of the GNU Affero General Public License     #
# along with this product.  If not, see <http://www.gnu.org/licenses/>.        #
#                                                                              #
# For more information on Alces Software, please visit:                        #
# http://www.alces-software.org/                                               #
#                                                                              #
################################################################################

# Script to check for PSU health.
# 2 PSUs per chassis. 4 Nodes per chassis. The first node in each chassis's view of PSU health is reported.

# set ipmi-check spool directory
checkdir=/var/spool/nagios/ipmi-check

# Check that ipmi output files are available
[[ -d $checkdir ]] || exit 3

# By default, node names are nodeXYZ, unless customers specify otherwise.
node_name="node"

# Check that we've been passed a parameter
remote=$1
if [ ! $remote ] ; then

   psu_status_fault=0
   psu_status_good=0
   psu_redundancy_fault=0
   psu_redundancy_good=0
  
   # Arrays to keep track of which node's PSUs need attention. 
   declare -a unhealthy_psus
   declare -a unhealth_redundancy_psus

   # The following string is what we are hoping to find for the PSU Status as reported from each node per chassis.
   # Anything other than this indicates a problem with a PSU.

   psu_status_ok="'Presence detected'"

   # The following string is what we are hoping to find for PSU Redundancy as reported from each node per chasis.
   # Anything other than this indicates a PSU Redundancy problem.

   psu_redundancy_ok="'Fully Redundant'"


   # Precondition: The first node in the list has an ID of node01.txt
   # Postcondition: Fault is equal to the number of nodes checked that report a fault.
   #                Good is equal to the number of nodes chcked that report OK

   # Get listening of NODE files and iterate through each one 
   for file in `ls -1 $checkdir/$node_name*`
   do

      # Obtain number of the node from the file name	   
      node_nr=`echo $file | grep -o "[0-9]*"`

      # Remove leading zeros
      node_nr=`echo $node_nr | sed 's/^0*//'`
      
      # If NOT the 4th node in the list, skip this iteration.
      if [[ $(($node_nr % 4)) != 1 ]] ; then
	      continue
      fi

      if [ `egrep -i "psu (1|2) Status" $file | grep -cv "$psu_status_ok\$"` -gt 0 ] ; then
         psu_status_fault=`expr $psu_status_fault + 1`
	 unhealthy_psus=("${unhealthy_psus}""$node_name$node_nr ")
      else
         psu_status_good=`expr $psu_status_good + 1`
      fi

      if [ `egrep -i "PSU Redundancy" $file | grep -cv "$psu_redundancy_ok\$"` -gt 0 ] ; then
         psu_redundancy_fault=`expr $psu_redundancy_fault + 1`
	 unhealthy_redundancy_psus=("${unhealthy_redundancy_psus}""$node_name$node_nr ")
      else
	 psu_redundancy_good=`expr $psu_redundancy_good + 1`
      fi
   done

   # Report information back
   if [ $psu_status_fault -gt 0 ] || [ $psu_redundancy_fault -gt 0 ] ; then
      echo "$psu_status_fault PSU Status Fault(s)! Check node(s): ${unhealthy_psus[@]}. $psu_redundancy_fault PSU Redundancy Fault(s)! Check node(s): ${unhealthy_redundancy_psus[@]}"
      exit 1
   else
      echo "$psu_status_good node(s) report(s) no PSU faults and $psu_redundancy_good node(s) report(s) no PSU Redundancy problems."
      exit 0
   fi
fi
